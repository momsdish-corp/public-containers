name: 'Release Image'

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  get-changed-containers:
    timeout-minutes: 3
    runs-on: ubuntu-22.04
    outputs:
      CHANGED_DIRS_JSON: ${{ steps.changed-dirs.outputs.CHANGED_DIRS_JSON }}

    steps:
      - name: Checkout files
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Get list of changed directories
        id: changed-dirs
        run: |
          # Get the changed directories in ./containers/*, one per line
          FOUND_FILES=$(git diff --name-only HEAD~1..HEAD './containers/*/*/**')
          FOUND_DIRS=$(echo "$FOUND_FILES" | awk -F/ 'NF>3 {print $1"/"$2"/"$3}' | sort -u)
          echo "Found dirs: $FOUND_DIRS"
          
          # Require no spaces in directory names
          if [[ "$FOUND_DIRS" =~ \  ]]; then
            echo "ERROR: Directory names cannot contain spaces"
            exit 1
          fi
          
          # Filter out non-existing directories
          CHANGED_DIRS=""
          while IFS= read -r dir; do
            if [ -d "$dir" ]; then
              [ -z "$CHANGED_DIRS" ] && CHANGED_DIRS="$dir" || CHANGED_DIRS="$CHANGED_DIRS $dir"
            fi
          done <<< "$FOUND_DIRS"
          echo "Changed dirs: $CHANGED_DIRS"
                   
          # Put each directory in a JSON array
          if [ -z "$CHANGED_DIRS" ]; then
            CHANGED_DIRS_JSON="[]"
          else
            CHANGED_DIRS_JSON=$(echo -e "$CHANGED_DIRS" | jq -R . | jq -cs .)
          fi
          echo "CHANGED_DIRS_JSON=$CHANGED_DIRS_JSON" >> $GITHUB_OUTPUT
          echo "Changed dirs JSON: $CHANGED_DIRS_JSON"
  build-container:
    if: ${{ needs.get-changed-containers.outputs.CHANGED_DIRS_JSON != '[]' }}
    needs:
      - get-changed-containers
    runs-on: ubuntu-22.04
    timeout-minutes: 6
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        CONTAINER_DIR: ${{ fromJson(needs.get-changed-containers.outputs.CHANGED_DIRS_JSON) }}
    steps:
      - name: Checkout files
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Log in to the container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Define Image Tags
        run: |
          # Make sure the directory is ./containers/<container>/<version>
          if [[ ! ${{ matrix.CONTAINER_DIR }} =~ ^containers/[^/]+/[^/]+$ ]]; then
              echo "ERROR: CONTAINER_DIR is invalid"
              exit 1
          fi
          
          # Require file ./containers/<container>/<version>/tags.yaml
          TAGS_FILE="${{ matrix.CONTAINER_DIR }}/tags.yaml"
          if [ ! -f "$TAGS_FILE" ]; then
              echo "ERROR: $TAGS_FILE not found"
              exit 1
          fi
          
          # Populate tags, one per line
          # for each line in tags.yaml, loop
          TAGS=""
          while IFS= read -r line; do
              # If the line starts with '- ', it's a tag
                if [[ $line =~ ^- ]]; then
                    # Remove a dash, followed by any number of spaces
                    line=$(echo "$line" | sed -e 's/^- *//' -e 's/"//g' -e "s/'//g")
                    # Validate the tag (allowed formats x, x.x, x.x.x)
                    if [[ ! $line =~ ^[0-9]+(\.[0-9]+){0,2}$ ]]; then
                        echo "ERROR: $line is not a valid tag in $TAGS_FILE"
                        exit 1
                    fi
                    # Append a newline character before each tag, except for the first one
                    if [ -z "$TAGS" ]; then
                        TAGS="$line"
                    else
                      TAGS="$TAGS\n$line"
                    fi
                fi
          done < $TAGS_FILE
          
          # Require at least one tag
          if [ -z "$TAGS" ]; then
              echo "ERROR: No tags found in $TAGS_FILE"
              exit 1
          fi
          
          # Get the version from the directory name
          VERSION=$(basename ${{ matrix.CONTAINER_DIR }})
          
          # Require one of the tags to match the version
          if [[ ! $TAGS =~ (^|\n)$VERSION($|\n) ]]; then
              echo "ERROR: $VERSION not found in $TAGS_FILE. The directory name must match one of the tags."
              exit 1
          fi
          
          # Get the container name from the directory name
          CONTAINER=$(basename $(dirname ${{ matrix.CONTAINER_DIR }}))
          
          # If the version is highest, add the latest tag
          DIRS=$(ls -d */ | grep -v $VERSION)
          for DIR in $DIRS; do
              if [[ $DIR > $VERSION ]]; then
                  TAGS="$TAGS\nlatest"
              fi
          done
          
          # Build tags, comma separated
          IMAGE_TAGS=""
          while IFS= read -r line; do
              # Append a newline character before each tag, except for the first one
              if [ -z "$IMAGE_TAGS" ]; then
                  IMAGE_TAGS="ghcr.io/${{ github.repository }}:$CONTAINER-$line"
              else
                  IMAGE_TAGS="$IMAGE_TAGS,ghcr.io/${{ github.repository }}:$CONTAINER-$line"
              fi
          done <<< "$(echo -e "$TAGS")"
          
          # Print the tags
          echo "TAGS=$TAGS"
          
          echo "IMAGE_TAGS=$IMAGE_TAGS" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
      - name: Build & push the container image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.CONTAINER_DIR }}
          file: ${{ matrix.CONTAINER_DIR }}/Dockerfile
          push: true
          tags: ${{ env.IMAGE_TAGS }}
          platforms: linux/amd64, linux/arm64